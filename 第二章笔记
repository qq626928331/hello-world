						第二章笔记
一.Java中的标识符
	命名规则：
		1.必须以字母或下划线_ 或 美元$ 开头
		2.余下的字符可以是字母下划线美元$或者是数字长度不限，不允许有空格
		3.不能用Java中的关键字或者保留字作为标识符
		  3.1关键字：在java中已经有过定义的名字不能用来重复定义。
		  3.2保留字：现在还没有被定义，是java被预留出来的标识也是不能用来命名的。
		类名：Pascal规则
		变量名&方法名：Camel规则（骆驼命名法）
		包名：全部小写
		常量名：全部大写
二.变量
     概念：变量是指在程序的运行过程中随时可以发生变化的量 。
              随时可以加减乘除等一些列操作
              临时去保存的一些数据（程序结束后就被销毁了）
     变量的声明：
        语法：数据类型     变量名    =  具体的数值；
        int    x   =     20	   
     数据类型和分类
         两大类
	 一.基本数据类型
	 	1.1 数值型
	 		1.1.1 整数类型（byte，short，int，long）
	 			byte 	1字节 = 	二进制的八位   最小0000 0000  最大1111 1111 八位数的第一位为符号位代表这个数的正负
	 			第一位 如果是0 正数 第一位如果为1 负数 第一位是不参与运算 -2^7~2^7-1 零除外 没有正负之分
	 			short 	2字节		二进制16位 -2^15~2^15-1
	 			int		4字节	  	二进制32位 -2^31~2^31-1
	 			long	8字节		二进制64位 -2^63~2^63-1
	 			long类型 如果数值后面不加l或L默认存储空间是int类型的空间大小
	 			所以 如果存储一个大于int类型的数据 并且小于long类型的数据需要在末尾加上l或L
	 			
	 	分别计算：
	 	二进制   110011 = 2^0*1+2^1*1+2^2*0+2^3*0+2^4*1+2^5*1 = 51
	 		 110001 = 2^0*1+2^1*0+2^2*0+2^3*0+2^4*1+2^5*1 = 49
	 	十进制   35 = 35/2=17-1 17/2=8-1   8/2=4-0  4/2=2-0  2/2=1-0  1/2=0-1 = 100011  
	 		 44 = 44/2=22-0	22/2=11-0 11/2=5-1 5/2=2-1 2/2=1-0 1/2=0-1 = 101100  		  
	 	八进制：0~7
	 		语法必须以0开头 开头的零不计算
	 	十六进制：
	 		0~9 10(A) 11(B) 12(C) 13(D) 14(E) 15(F)
	 		  语法：必须以0x或者0X 开头
	 		  
	 		1.1.2 浮点类型（float，double）	小数
	 			float	32位	4字节	结尾要加F或f
	 			double	64位	8字节 
	 			 
	 	1.2 字符型   char 一个字符
	 		char	16位	2字节
	 		可以定义一个字符也可以去声明一个汉字（2字节）
	 		语法：char s = 'W'
	 	1.3 布尔型   boolean（true/false）
 	 二.引用数据类型
 	 三.数据类型的转换
 	 	3.1 自动类型转换（隐式）
 	 		1.两种类型彼此兼容
 	 		2.目标类型取值范围要大于原类型
		//自动类型转换
			byte b=100; 	//-128~127 	小杯
			int a =10;	//-2^31~2^31-1	大杯
			a=b;	//将b的值赋给a 即相当于小杯给大杯倒水 
			System.out.println(a);

 	 	3.2 强制类型转换（显式）
 	 		1.两种类型彼此不兼容
 	 		2.目标类型取值范围要要小于原类型
 	 		注意：这么转会发生数据溢出，丢失数据精度。
		//强制类型转换
			int x =-128;	//-2^31~2^31-1	大杯
			byte y =-10;	//-128~127	小杯
			y=(byte)x;	//将x的值赋给y	大杯给小杯倒水
			System.out.println(y);
		注意：1.boolean类型 不能进行数据类型转换
		      2.byte、short、char之间不会相互转换，他们三者在计算时首先会转换为int类型
		eg：
		    byte s =12;
			short s2 =10;
			short s3=1;
			char w = 'a' ------97
			int i;	
			s3 =(short)(s+s2);
			i = s+s2; 	// 因为 byte+short 进行了计算 首先会转成 int类型    当 int 转 short会发生强制类型转换   		
			s3 = s+w; 	// 报错   s+w 为int 类型 
			System.out.println(s3);
 	四.运算符
 	     自增++
 	 	4.1	前自增 ++n
 	 	概念：在本身数值的基础上加一
 	 	注意：自己本身先加一 然后在参与运算 （先将n增加1，然后将n的值作为整个表达的的值）
 	 	4.2   后自增 n++
 	 	自己参与运算后，自己本身再加1（先将n的值作为整个表达的值，然后将n增加1）
 	     逻辑运算符：
 	     &&	逻辑与	会发生短路现象
 	     ||	逻辑或
 	     !	逻辑非
 	     位运算符	只对  byte short char int long 有效
 	     &	按位与
 	     |	按位或
 	     ^	异或	只有参与运算的两位不同，输出结果为1，相同则为0
		2^2 =0
     		2^3 =1
 	     <<	左移	a<<b 将a的二进制数据左移b位，右边移空的部分补0
		a=6 << 2  = 24 
		二进制：110 << 2 = 11000
 	     >>	右移	
 	     	如果最高位为0	移空的位置补0
 	     	如果最高位为1	移空的位置补1
 	     >>>无符号右移
 	     	不管最高位是0或1，左边移空的位置都补0
 	     三元运算符
 	     （4<10? true:false）;	4是否大于10 返回冒号左侧的数据 否则返回右侧的数据